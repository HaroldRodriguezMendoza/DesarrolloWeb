/**
 * Creator: Christian Hotz
 * Company: hydra newmedia GmbH
 * Date: 08.06.16
 *
 * Copyright hydra newmedia GmbH
 */
"use strict";
/**
 *  Imports
 */
var _ = require('lodash');
var OrCondition = (function () {
    /**
     *   OrCondition class constructor
     */
    function OrCondition(keys) {
        var _this = this;
        /**
         *   Class variables
         */
        this.orConditions = [];
        this.rewrites = { 'id': '_id' };
        this.originalKeys = keys;
        this.rewrittenKeys = _.map(keys, function (key) {
            return _this.rewriteKey(key);
        });
    }
    /**
     * Adds a IModel-object to the condition. Reads the keys and adds them to the condition.
     *
     * @param {IModel} model The model of type T
     * @returns {OrCondition} The OrCondition object (this).
     */
    OrCondition.prototype.add = function (model) {
        var _this = this;
        // gather the keys (_id, masterdata.fin, masterdata.vin, ...) for searching
        _.forEach(this.originalKeys, function (key) {
            var id = _.get(model, key, null);
            var realKey = _this.rewriteKey(key);
            if (id) {
                var part = _this.getPart(realKey);
                part.push(id);
            }
        });
        return this;
    };
    /**
     * Builds the or-condition, ready to use in the mongoDB
     *
     * @returns {{$or: Array}} The or-condition
     */
    OrCondition.prototype.build = function () {
        /*
            Example for complete or-condition
            let condition = {
                $or: [
                    { '_id': { $in: [ ] } },
                    { 'masterdata.fin': { $in: [ ] } },
                    { 'masterdata.vin': { $in: [ ] } },
                    { 'masterdata.orderNo': { $in: [ ] } }
                ]
            };
         */
        return { $or: this.orConditions };
    };
    /**
     * Check if the or-conditions are empty. Therefore, the condition would find every object when executed.
     *
     * @returns {boolean}
     */
    OrCondition.prototype.isEmpty = function () {
        return this.orConditions.length === 0;
    };
    /**
     * Get's the part of the or-condition. If it does not exist, it will be created as an empty part.
     *
     * @param {string} key The key/property which should be searched for in the condition
     * @returns {array<string>}
     */
    OrCondition.prototype.getPart = function (key) {
        var realKey = this.rewriteKey(key);
        var inKeyArray = _.find(this.rewrittenKeys, function (primaryKey) {
            return primaryKey === realKey;
        });
        if (!inKeyArray) {
            return null;
        }
        // find object in the orConditions which has the requested property
        var part = _.find(this.orConditions, function (condition) {
            return _.get(condition, realKey, null) !== null;
        });
        if (!part) {
            part = {};
            part[realKey] = { $in: [] };
            this.orConditions.push(part);
        }
        return part[realKey]['$in'];
    };
    /**
     * Rewrites the input according to the rewrites map into another string and returns it.
     *
     * @param {string} key The string to be rewritten.
     * @returns {string} The rewritten string.
     */
    OrCondition.prototype.rewriteKey = function (key) {
        if (this.rewrites[key]) {
            return this.rewrites[key];
        }
        else {
            return key;
        }
    };
    OrCondition.prototype.getConditions = function () {
        return this.orConditions;
    };
    OrCondition.prototype.setConditions = function (conditions) {
        this.orConditions = conditions;
    };
    return OrCondition;
}());
exports.OrCondition = OrCondition;
