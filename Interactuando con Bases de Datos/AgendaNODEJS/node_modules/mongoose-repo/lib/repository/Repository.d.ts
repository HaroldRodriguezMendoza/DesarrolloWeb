import * as mongoose from 'mongoose';
import { LoggerInstance } from 'winston';
import { LoggerConfig } from 'be-utils';
import { IRepository } from './IRepository';
import { IModel } from './models/IModel';
import { IError } from 'be-utils';
import { IResultList } from './models/IResultList';
export declare class Repository<T extends mongoose.Document> implements IRepository<T> {
    /**
     *  Class properties
     */
    private collection;
    private collectionName;
    private logger;
    private static FIND_UPDATE_OPTS;
    /**
     *  Class constructor of Repository
     */
    constructor(collection: mongoose.Model<T>, loggerOrLogDir: LoggerInstance | LoggerConfig);
    insert(model: IModel<T>, callback: (err: IError, model?: T) => void): void;
    update(id: string, model: IModel<T>, callback: (err, model?: T) => void): void;
    updateByCondition(cond: any, model: IModel<T>, callback: (err: any, model?: T) => void): void;
    updateBulk(keys: Array<string>, models: Array<IModel<T>>, callback: (err: IError) => void): void;
    findOne(cond: Object, callback: (err: any, model?: T) => void): void;
    findById(id: string, callback: (err: any, model?: T) => void): void;
    findAll(callback: (err: any, models?: IResultList<T>) => void, limit?: number, offset?: number): void;
    find(cond: Object, callback: (err: any, models?: IResultList<T>) => void, limit?: number, offset?: number): void;
    private cleanupEmbeddedDocuments(doc);
}
