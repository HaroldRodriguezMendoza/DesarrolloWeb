import { Document } from 'mongoose';
import { IModel } from './models/IModel';
export declare class OrCondition<T extends Document> {
    /**
     *   Class variables
     */
    private orConditions;
    private originalKeys;
    private rewrittenKeys;
    private rewrites;
    /**
     *   OrCondition class constructor
     */
    constructor(keys: Array<string>);
    /**
     * Adds a IModel-object to the condition. Reads the keys and adds them to the condition.
     *
     * @param {IModel} model The model of type T
     * @returns {OrCondition} The OrCondition object (this).
     */
    add(model: IModel<T>): OrCondition<T>;
    /**
     * Builds the or-condition, ready to use in the mongoDB
     *
     * @returns {{$or: Array}} The or-condition
     */
    build(): {
        $or: Array<any>;
    };
    /**
     * Check if the or-conditions are empty. Therefore, the condition would find every object when executed.
     *
     * @returns {boolean}
     */
    isEmpty(): boolean;
    /**
     * Get's the part of the or-condition. If it does not exist, it will be created as an empty part.
     *
     * @param {string} key The key/property which should be searched for in the condition
     * @returns {array<string>}
     */
    getPart(key: string): Array<string>;
    /**
     * Rewrites the input according to the rewrites map into another string and returns it.
     *
     * @param {string} key The string to be rewritten.
     * @returns {string} The rewritten string.
     */
    rewriteKey(key: string): string;
    getConditions(): Array<string>;
    setConditions(conditions: Array<string>): void;
}
